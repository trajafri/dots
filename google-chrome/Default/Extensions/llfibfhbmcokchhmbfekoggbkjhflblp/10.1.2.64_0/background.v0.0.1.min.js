webpackJsonp([1],{

/***/ 20:
/***/ (function(module, exports) {

module.exports = md5;

/***/ }),

/***/ 74:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _Polyfill = __webpack_require__(23);

var _Polyfill2 = _interopRequireDefault(_Polyfill);

var _Consts = __webpack_require__(0);

var _LoggerService = __webpack_require__(4);

var _LoggerService2 = _interopRequireDefault(_LoggerService);

var _ConfigurationService = __webpack_require__(19);

var _ConfigurationService2 = _interopRequireDefault(_ConfigurationService);

var _EventsService = __webpack_require__(5);

var _EventsService2 = _interopRequireDefault(_EventsService);

var _ServiceFactory = __webpack_require__(2);

var _ServiceFactory2 = _interopRequireDefault(_ServiceFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var conf = new _ConfigurationService2.default();
var configuration = void 0;

window.onerror = function errorHandler(errorMsg, url, lineNumber) {
    _LoggerService2.default.debug(errorMsg);
    _LoggerService2.default.track('window-error', errorMsg + ' ' + lineNumber, true);
    return false;
};

conf.load().then(function () {

    try {
        configuration = conf.getConfiguration();
        _LoggerService2.default.debug("Configuration loaded");
        var extensionComponentKeys = Object.keys(configuration.components);
        var loadedApp = false;

        for (var i = 0; !loadedApp && i < extensionComponentKeys.length; i++) {
            var component = configuration.components[extensionComponentKeys[i]];
            if (component.type === _Consts.BACKGROUND_TAB_TYPE) {
                loadedApp = true;
                _ServiceFactory2.default.load(component);
            } else if (component.type === _Consts.COMMON_COMPONENTS_TYPE) {
                _ServiceFactory2.default.load(component);
            }
        }

        if (loadedApp) {
            try {
                var existingId = localStorage[_Consts.CURRENT_BACKGROUND_RUN_ID];
                if (!existingId) {
                    localStorage[_Consts.CURRENT_BACKGROUND_RUN_ID] = 1;
                } else {
                    var newId = Math.floor(Math.random() * (99999999999 - 1)) + 1;
                    var indicator = true;
                    while (indicator) {
                        if (existingId.toString() != newId.toString()) {
                            localStorage[_Consts.CURRENT_BACKGROUND_RUN_ID] = newId;
                            indicator = false;
                        } else {
                            newId = Math.floor(Math.random() * (99999999999 - 1)) + 1;
                        }
                    }
                }
            } catch (e) {
                _LoggerService2.default.track('error-init-randProcess', e.message);
            }
            _EventsService2.default.trigger(_Consts.BACKGROUND_LOADED_EVENT);
            _LoggerService2.default.debug('Background loaded');
        } else {
            _LoggerService2.default.track('failed-init');
            _LoggerService2.default.debug("Background loaded failed to load");
        }
    } catch (ex) {
        _LoggerService2.default.track('error-init', ex.message);
    }
}).catch(function (e) {
    _LoggerService2.default.track('error-load-init', e.message);
});

/***/ })

},[74]);